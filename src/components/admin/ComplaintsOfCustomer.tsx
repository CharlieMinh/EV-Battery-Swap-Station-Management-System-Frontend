import React, { useEffect, useState, useMemo } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Loader2, Battery, User, MapPin, Search } from "lucide-react";
import {
  BatteryComplaintResponse,
  fetchAllComplaints,
} from "@/services/complaint";
import { fetchCustomerById } from "@/services/admin/customerAdminService";

/** üïí Format ng√†y theo gi·ªù Vi·ªát Nam */
function formatVNDate(dateString: string | null): string {
  if (!dateString) return "‚Äî";
  return new Date(dateString).toLocaleString("vi-VN", {
    timeZone: "Asia/Ho_Chi_Minh",
    hour12: false,
  });
}

/** üìò Map tr·∫°ng th√°i khi·∫øu n·∫°i */
const statusLabels: Record<string, string> = {
  PendingScheduling: "Ch·ªù ƒë·∫∑t l·ªãch ki·ªÉm tra",
  Scheduled: "ƒê√£ ƒë·∫∑t l·ªãch ki·ªÉm tra",
  CheckedIn: "ƒê√£ check-in t·∫°i tr·∫°m",
  Investigating: "ƒêang ki·ªÉm tra th·ª±c t·∫ø",
  Confirmed: "X√°c nh·∫≠n l·ªói h·ªá th·ªëng/b·∫£o h√†nh",
  Rejected: "T·ª´ ch·ªëi (L·ªói do ng∆∞·ªùi d√πng)",
  Resolved: "ƒê√£ gi·∫£i quy·∫øt (ƒê·ªïi pin th√†nh c√¥ng)",
};

const ComplaintsOfCustomer: React.FC = () => {
  const [complaints, setComplaints] = useState<BatteryComplaintResponse[]>([]);
  const [userNames, setUserNames] = useState<Record<string, string>>({});
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    const loadComplaintsWithUserNames = async () => {
      try {
        const data = await fetchAllComplaints(1, 20);
        const complaintList = data.items || [];

        // üîç L·∫•y t·∫•t c·∫£ userId duy nh·∫•t
        const userIds = [
          ...new Set(
            complaintList.map((c: any) => c.reportedByUserId).filter(Boolean)
          ),
        ];

        // üß† T·∫°o map {userId: userName}
        const namesMap: Record<string, string> = {};

        await Promise.all(
          userIds.map(async (id) => {
            try {
              const user = await fetchCustomerById(id as string);
              namesMap[id as string] = user.name || "Kh√¥ng r√µ";
            } catch (err) {
              console.warn("Kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n cho user:", id, err);
              namesMap[id as string] = "Kh√¥ng r√µ";
            }
          })
        );

        setUserNames(namesMap);
        setComplaints(complaintList);
      } catch (error) {
        console.error("L·ªói khi t·∫£i danh s√°ch khi·∫øu n·∫°i:", error);
      } finally {
        setLoading(false);
      }
    };

    loadComplaintsWithUserNames();
  }, []);

  /** üîç L·ªçc danh s√°ch theo t√™n ng∆∞·ªùi khi·∫øu n·∫°i */
  const filteredComplaints = useMemo(() => {
    if (!searchTerm.trim()) return complaints;
    return complaints.filter((c) => {
      const name = userNames[c.reportedByUserId]?.toLowerCase() || "";
      return name.includes(searchTerm.toLowerCase());
    });
  }, [searchTerm, complaints, userNames]);

  if (loading)
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="animate-spin w-6 h-6 mr-2" /> ƒêang t·∫£i d·ªØ li·ªáu...
      </div>
    );

  if (complaints.length === 0)
    return (
      <p className="text-center text-gray-500 mt-6">Kh√¥ng c√≥ khi·∫øu n·∫°i n√†o.</p>
    );

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4 text-gray-800">
        Danh s√°ch khi·∫øu n·∫°i ng∆∞·ªùi d√πng
      </h2>

      {/* üîé √î l·ªçc theo t√™n ng∆∞·ªùi khi·∫øu n·∫°i */}
      <div className="flex items-center gap-2 mb-4 max-w-md">
        <Search className="w-4 h-4 text-gray-500" />
        <Input
          placeholder="T√¨m theo t√™n ng∆∞·ªùi khi·∫øu n·∫°i..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="border-gray-300"
        />
      </div>

      {/* Danh s√°ch complaint */}
      <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {filteredComplaints.map((c) => (
          <Card
            key={c.id}
            className="shadow-md hover:shadow-lg transition-shadow duration-200 border border-gray-200"
          >
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                <Battery className="w-5 h-5 text-blue-500" />
                Khi·∫øu n·∫°i #{c.id.slice(0, 8)}
              </CardTitle>
              <CardDescription>
                B√°o c√°o ng√†y: {formatVNDate(c.reportDate)}
              </CardDescription>
            </CardHeader>

            <CardContent className="space-y-3 text-sm">
              <p className="flex items-center gap-2">
                <User className="w-4 h-4 text-gray-500" />
                <span className="font-medium text-gray-700">Ng∆∞·ªùi g·ª≠i: </span>
                {userNames[c.reportedByUserId] || "Kh√¥ng r√µ"}
              </p>

              <p className="flex items-center gap-2">
                <MapPin className="w-4 h-4 text-gray-500" />
                <span className="font-medium text-gray-700">Tr·∫°m: </span>
                {c.stationName || "Kh√¥ng x√°c ƒë·ªãnh"}
              </p>

              <p>
                <span className="font-medium text-gray-700">Tr·∫°ng th√°i: </span>
                {statusLabels[c.status] || c.status}
              </p>

              <p>
                <span className="font-medium text-gray-700">
                  N·ªôi dung khi·∫øu n·∫°i:{" "}
                </span>
                {c.complaintDetails}
              </p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default ComplaintsOfCustomer;
