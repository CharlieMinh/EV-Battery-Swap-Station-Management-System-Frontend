// src/components/staff/CheckInManagement.tsx
import React, { useRef, useState } from "react";
import BarcodeScannerComponent from "react-qr-barcode-scanner";
import { toast } from "react-toastify";

export default function CheckInManagement({
  open,
  onClose,
  onDetected,
}: {
  open: boolean;
  onClose: () => void;
  onDetected: (rawQrOrText: string) => void;
}) {
  const [manual, setManual] = useState("");
  const [err, setErr] = useState<string | null>(null);
  const lockRef = useRef<number>(0);           // ch·ªëng g·ªçi li√™n t·ª•c
  const lastErrorMsgRef = useRef<string | null>(null); // tr√°nh spam toast l·ªói gi·ªëng nhau

  if (!open) return null;

  const toastOpts = {
    position: "top-right" as const,
    autoClose: 2200,
    closeOnClick: true,
  };

  const triggerOnce = (text: string) => {
    const now = Date.now();
    if (now - lockRef.current < 1000) return; // 1s ch·ªëng spam
    lockRef.current = now;

    // ‚úÖ Gi·ªØ nguy√™n: ch·ªâ g·ªçi onDetected
    onDetected(text);

    // ‚úÖ Th√¥ng b√°o qu√©t th√†nh c√¥ng (ch·ªâ hi·ªÉn th·ªã 1 l·∫ßn nh·ªù toastId)
    const preview = text.length > 48 ? text.slice(0, 45).trim() + "..." : text.trim();
    toast.success(`ƒê√£ qu√©t m√£: ${preview}`, {
      ...toastOpts,
      toastId: `qr-success-${preview}`, // c√πng preview => kh√¥ng b·ªã hi·ªÉn th·ªã tr√πng
    });

    if (err) setErr(null);
  };

  const handleText = (txt?: string | null) => {
    if (!txt) return;
    triggerOnce(txt.trim());
  };

  const setErrorWithToast = (msg: string) => {
    setErr(msg);
    if (lastErrorMsgRef.current !== msg) {
      lastErrorMsgRef.current = msg;
      toast.error(msg, { ...toastOpts, toastId: `qr-error-${msg}` });
    }
  };

  return (
    <div className="fixed inset-0 z-50 grid place-items-center bg-black/50 p-4">
      <div className="w-full max-w-xl rounded-xl bg-white p-4 shadow-lg">
        <div className="mb-3 flex items-center justify-between">
          <h3 className="text-lg font-semibold">üì∑ Qu√©t m√£ Check-in</h3>
          <button
            onClick={() => {
              onClose();
              toast.info("ƒê√£ ƒë√≥ng c·ª≠a s·ªï qu√©t.", { ...toastOpts, toastId: "qr-close" });
            }}
            className="border px-3 py-1 rounded-lg"
          >
            ƒê√≥ng
          </button>
        </div>

        <div className="overflow-hidden rounded-lg border relative">
          <BarcodeScannerComponent
            width={640}
            height={360}
            facingMode="environment"
            onUpdate={(errObj: any, result: any) => {
              try {
                if (result && typeof result.getText === "function") {
                  const text = result.getText();
                  if (text) {
                    handleText(text);
                  }
                } else if (errObj) {
                  // "Kh√¥ng th·∫•y m√£" s·∫Ω l·∫∑p li√™n t·ª•c khi camera ch∆∞a nh√¨n th·∫•y g√¨ ‚Äî b·ªè qua
                  if (errObj.name === "NotFoundException") return;

                  if (errObj.name === "NotAllowedError") {
                    setErrorWithToast("Tr√¨nh duy·ªát b·ªã ch·∫∑n quy·ªÅn camera. H√£y c·∫•p quy·ªÅn v√† th·ª≠ l·∫°i.");
                  } else if (errObj.name === "NotReadableError") {
                    setErrorWithToast("Kh√¥ng truy c·∫≠p ƒë∆∞·ª£c camera. Ki·ªÉm tra ·ª©ng d·ª•ng kh√°c ƒëang d√πng camera.");
                  } else if (errObj.name === "OverconstrainedError") {
                    setErrorWithToast("Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã camera ph√π h·ª£p. Th·ª≠ chuy·ªÉn sang camera kh√°c.");
                  } else {
                    setErrorWithToast("Kh√¥ng th·ªÉ ƒë·ªçc m√£.");
                  }
                }
              } catch {
                setErrorWithToast("Kh√¥ng th·ªÉ ƒë·ªçc m√£.");
              }
            }}
          />
        </div>

        <div className="mt-3">
          {err && <div className="text-xs text-red-600 mb-2">{err}</div>}
          <div className="flex gap-2">
            <input
              className="w-full rounded border px-3 py-2"
              placeholder="D√°n chu·ªói QR (base64) ho·∫∑c nh·∫≠p ReservationId"
              value={manual}
              onChange={(e) => setManual(e.target.value)}
            />
            <button
              className="rounded border px-3 py-2"
              onClick={() => {
                const v = manual.trim();
                if (!v) {
                  toast.warn("Vui l√≤ng nh·∫≠p n·ªôi dung ƒë·ªÉ x√°c nh·∫≠n.", {
                    ...toastOpts,
                    toastId: "qr-manual-empty",
                  });
                  return;
                }
                handleText(v);
                toast.success("ƒê√£ x√°c nh·∫≠n th·ªß c√¥ng n·ªôi dung qu√©t.", {
                  ...toastOpts,
                  toastId: "qr-manual-ok",
                });
              }}
            >
              X√°c nh·∫≠n
            </button>
          </div>
          <p className="mt-2 text-xs text-gray-500">
            L∆∞u √Ω: Tr√¨nh duy·ªát c·∫ßn ch·∫°y tr√™n HTTPS ho·∫∑c localhost ƒë·ªÉ m·ªü camera.
          </p>
        </div>
      </div>
    </div>
  );
}
