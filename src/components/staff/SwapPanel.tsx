// src/components/staff/SwapPanel.tsx
import React, { useState } from "react";
import {
  finalizeSwapFromReservation,
  type Reservation,
  type SwapFinalizeResponse,
} from "../../services/staff/staffApi";
import {
  CheckCircle,
  Battery,
  BadgeCheck,
  Loader2,
  AlertTriangle,
} from "lucide-react";

type Props = {
  reservation: Reservation;
  initialBatteryHealth?: number; // ‚≠ê Nh·∫≠n % pin t·ª´ InspectionPanel
  onSwapped: (info: { swapId?: string }) => void;
  onCancel: () => void;
};

export default function SwapPanel({
  reservation,
  initialBatteryHealth = 85, // ‚≠ê Default 85 n·∫øu kh√¥ng truy·ªÅn v√†o
  onSwapped,
  onCancel,
}: Props) {
  const [health, setHealth] = useState<number>(initialBatteryHealth); // ‚≠ê D√πng gi√° tr·ªã t·ª´ props
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<SwapFinalizeResponse | null>(null);
  const [message, setMessage] = useState("");

  const handleSwap = async () => {
    if (health < 0 || health > 100) {
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p % pin c≈© trong kho·∫£ng 0-100.");
      return;
    }

    setLoading(true);
    setMessage("");

    console.log("üîã Sending to BE - oldBatteryHealth:", health); // ‚≠ê Debug log

    try {
      const res = await finalizeSwapFromReservation({
        reservationId: reservation.reservationId,
        oldBatteryHealth: health,
      });

      if (res.success) {
        alert("‚úÖ ƒê√£ x√°c nh·∫≠n thay pin th√†nh c√¥ng.");
        setResult(res);
        onSwapped({ swapId: res.swapTransactionId });
      } else {
        // X·ª≠ l√Ω fallback l·ªói
        const code = res.code;
        const msg =
          res.message ||
          "ƒê√£ c√≥ l·ªói x·∫£y ra khi ho√†n t·∫•t giao d·ªãch. Vui l√≤ng ki·ªÉm tra l·∫°i.";

        if (code === 500 || code === 409 || code === 422) {
          alert(
            "‚ö†Ô∏è ƒê√£ c√≥ l·ªói x·∫£y ra khi ho√†n t·∫•t giao d·ªãch.\n" +
            "Tuy nhi√™n h·ªá th·ªëng c√≥ th·ªÉ ƒë√£ gi·ªØ ch·ªó pin (kho b√°o Reserved).\n" +
            "M√¨nh s·∫Ω ƒë√≥ng b·∫£ng n√†y. Vui l√≤ng ki·ªÉm tra tab Giao d·ªãch/Doanh thu."
          );
          onSwapped({});
        } else {
          alert(`‚ùå ${msg}`);
          setMessage(msg);
        }
      }
    } catch (err: any) {
      console.error("SwapPanel error:", err);
      alert("‚ùå Kh√¥ng th·ªÉ ho√†n t·∫•t thay pin. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="grid gap-6 lg:grid-cols-2">
      {/* LEFT PANEL */}
      <section className="rounded-2xl bg-white shadow-lg p-5">
        <header className="mb-3">
          <p className="text-xs text-gray-500">
            Thay pin ‚Äî Reservation: <b>{reservation.reservationId}</b>
          </p>
        </header>

        <div className="mb-4">
          <label className="block text-sm font-medium mb-1">
            % Pin c≈© (0-100)
          </label>
          <input
            type="number"
            min="0"
            max="100"
            className="w-full rounded-lg border px-3 py-2 focus:outline-none focus:ring-2 focus:ring-black/20"
            value={health}
            onChange={(e) => setHealth(Number(e.target.value))}
            placeholder="Nh·∫≠p % pin c≈© (v√≠ d·ª•: 85)"
          />
          <p className="mt-2 text-xs text-gray-500">
            Nh·∫≠p % pin c≈© m√† staff ƒëo ƒë∆∞·ª£c (0-100). H·ªá th·ªëng s·∫Ω t·ª± ch·ªçn pin m·ªõi ph√π h·ª£p.
          </p>
        </div>

        {message && (
          <div className="mb-3 flex items-start gap-2 rounded-lg border border-yellow-300 bg-yellow-50 p-2 text-sm text-yellow-700">
            <AlertTriangle className="h-4 w-4 shrink-0 mt-0.5" />
            <span>{message}</span>
          </div>
        )}

        <div className="flex flex-wrap gap-3">
          <button
            disabled={loading}
            onClick={handleSwap}
            className="inline-flex items-center gap-2 rounded-lg bg-black px-4 py-2 text-white hover:bg-gray-800 transition disabled:opacity-60"
          >
            {loading ? (
              <>
                <Loader2 className="h-4 w-4 animate-spin" />
                ƒêang th·ª±c hi·ªán‚Ä¶
              </>
            ) : (
              <>
                <CheckCircle className="h-4 w-4" />
                X√°c nh·∫≠n thay pin
              </>
            )}
          </button>
          <button
            className="rounded-lg border px-4 py-2 hover:bg-gray-50 transition"
            onClick={onCancel}
            disabled={loading}
          >
            ƒê√≥ng
          </button>
        </div>
      </section>

      {/* RIGHT PANEL */}
      <section className="rounded-2xl bg-white shadow-lg p-5">
        <h4 className="text-sm font-semibold mb-3">K·∫øt qu·∫£ h·ªá th·ªëng</h4>

        {!result ? (
          <div className="rounded-xl border bg-gray-50 p-4 text-sm text-gray-600">
            Sau khi b·∫•m <b>‚ÄúX√°c nh·∫≠n thay pin‚Äù</b>, pin m·ªõi s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y.
          </div>
        ) : (
          <div className="grid gap-3 text-sm">
            {/* Pin c≈© */}
            <div className="rounded-xl border p-3">
              <div className="mb-1 flex items-center gap-2 text-xs text-gray-500">
                <Battery className="h-4 w-4" />
                Pin c≈©
              </div>
              <div>
                <b>Serial:</b> {result.oldBattery?.serialNumber || "‚Äî"}
              </div>
              <div>
                <b>Model:</b> {result.oldBattery?.modelName || "‚Äî"}
              </div>
              <div>
                <b>Tr·∫°ng th√°i:</b> {result.oldBattery?.status || "‚Äî"}
              </div>
            </div>

            {/* Pin m·ªõi */}
            <div className="rounded-xl border p-3 bg-emerald-50/60">
              <div className="mb-1 flex items-center gap-2 text-xs text-emerald-700">
                <BadgeCheck className="h-4 w-4" />
                Pin m·ªõi
              </div>
              <div>
                <b>Serial:</b> {result.newBattery?.serialNumber || "‚Äî"}
              </div>
              <div>
                <b>Model:</b> {result.newBattery?.modelName || "‚Äî"}
              </div>
              <div>
                <b>Tr·∫°ng th√°i:</b> {result.newBattery?.status || "‚Äî"}
              </div>
            </div>

            {/* Th√¥ng tin chung */}
            <div className="rounded-xl border p-3 bg-white">
              <div>
                <b>M√£ swap:</b> {result.swapTransactionId || result.swapId || "‚Äî"}
              </div>
              <div>
                <b>Th·ªùi gian:</b>{" "}
                {result.timestamp
                  ? new Date(result.timestamp).toLocaleString()
                  : "‚Äî"}
              </div>
              <div>
                <b>Kh√°ch h√†ng:</b> {result.driverName || "‚Äî"}
              </div>
            </div>
          </div>
        )}
      </section>
    </div>
  );
}
