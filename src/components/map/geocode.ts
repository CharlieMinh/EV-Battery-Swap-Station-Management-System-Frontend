import axios from "axios";
import { Coordinates } from "@/services/admin/stationService";

// Cache ƒë·ªÉ tr√°nh g·ªçi API l·∫∑p l·∫°i
const cache = new Map<string, Coordinates | null>();

const GOONG_API_KEY = import.meta.env.VITE_GOONG_API_KEY;
const GOONG_GEOCODE_URL = "https://rsapi.goong.io/geocode";

// Bounding box (approx) cho TP.HCM ‚Äî d√πng ƒë·ªÉ ∆∞u ti√™n k·∫øt qu·∫£ n·∫±m trong khu v·ª±c n√†y
const HCM_BOUNDS = {
  latMin: 10.0,
  latMax: 11.5,
  lngMin: 105.5,
  lngMax: 107.5,
};

function isInHCM(lat: number, lng: number) {
  return lat >= HCM_BOUNDS.latMin &&
         lat <= HCM_BOUNDS.latMax &&
         lng >= HCM_BOUNDS.lngMin &&
         lng <= HCM_BOUNDS.lngMax;
}

/**
 * T·∫°o v√†i bi·∫øn th·ªÉ "g·ªçn" c·ªßa ƒë·ªãa ch·ªâ ƒë·ªÉ tƒÉng kh·∫£ nƒÉng match ƒë√∫ng (lo·∫°i b·ªè ph∆∞·ªùng, m√£ b∆∞u ch√≠nh, l·∫∑p city...)
 */
function buildAddressVariants(formAddress: string, city?: string) {
  const variants: string[] = [];
  const cityNormalized = city?.trim() || "";

  // raw
  variants.push(`${formAddress}${cityNormalized ? `, ${cityNormalized}` : ""}`);

  // r√∫t g·ªçn: b·ªè ph·∫ßn "Ph∆∞·ªùng ..." (n·∫øu c√≥)
  const noWard = formAddress.replace(/\b(P(h∆∞·ªùng|huong)|Ph∆∞·ªùng|P\.)\b[^,]*/gi, "").replace(/\s+,/g, ",").trim();
  if (noWard !== formAddress) variants.push(`${noWard}${cityNormalized ? `, ${cityNormalized}` : ""}`);

  // r√∫t g·ªçn: ch·ªâ l·∫•y t√™n ƒë∆∞·ªùng + qu·∫≠n (n·∫øu c√≥ t·ª´ 'Qu·∫≠n' ho·∫∑c 'Q.')
  const matchDistrict = formAddress.match(/(.+?)(?:,|\b)(.*?(Qu·∫≠n|Q\.)[^,]*)/i);
  if (matchDistrict && matchDistrict[1]) {
    const street = matchDistrict[1].trim();
    const district = matchDistrict[2] ? matchDistrict[2].trim() : "";
    variants.push(`${street}${district ? `, ${district}` : ""}${cityNormalized ? `, ${cityNormalized}` : ""}`);
  }

  // b·ªï sung: "TP <city>" shorthand
  if (cityNormalized) {
    variants.push(`${formAddress}, TP ${cityNormalized}`);
    variants.push(`${formAddress}, ${cityNormalized}`);
  }

  // th√™m 1 bi·∫øn th·ªÉ ng·∫Øn: t√™n ƒë·ªãa ƒëi·ªÉm + city (n·∫øu chu·ªói c√≥ t√™n ƒë·ªãa ƒëi·ªÉm b·∫±ng ch·ªØ hoa ƒë·∫ßu)
  const firstPart = formAddress.split(",")[0].trim();
  if (firstPart && firstPart.length < 60) {
    variants.push(`${firstPart}${cityNormalized ? `, ${cityNormalized}` : ""}`);
  }

  // lo·∫°i tr√πng l·∫∑p v√† trim
  return Array.from(new Set(variants.map(v => v.replace(/\s{2,}/g, " ").trim()))).filter(Boolean);
}

/**
 * Phi√™n b·∫£n n√¢ng cao: th·ª≠ nhi·ªÅu bi·∫øn th·ªÉ address, ∆∞u ti√™n k·∫øt qu·∫£ c√≥ 'H·ªì Ch√≠ Minh' ho·∫∑c n·∫±m trong bounding box HCM.
 */
export async function geocodeAddress(address: string, city?: string): Promise<Coordinates | null> {
  if (!address?.trim()) return null;

  const cacheKey = `${address}__${city ?? ""}`.toLowerCase().trim();
  if (cache.has(cacheKey)) {
    console.log("üì¶ Cache hit:", address);
    return cache.get(cacheKey)!;
  }

  if (!GOONG_API_KEY) {
    console.error("‚ùå Thi·∫øu VITE_GOONG_API_KEY trong .env");
    return null;
  }

  // T·∫°o c√°c bi·∫øn th·ªÉ ƒë·ªÉ th·ª≠
  const variants = buildAddressVariants(address, city ?? "");
  console.log("üîç Th·ª≠ c√°c bi·∫øn th·ªÉ address:", variants);

  try {
    for (const variant of variants) {
      // Log URL debug (d·ªÖ copy v√†o tr√¨nh duy·ªát)
      const encoded = encodeURIComponent(variant);
      const fullUrl = `${GOONG_GEOCODE_URL}?address=${encoded}&api_key=${GOONG_API_KEY}`;
      console.log("üåê g·ªçi:", fullUrl);

      const res = await axios.get(GOONG_GEOCODE_URL, {
        params: { address: encoded, api_key: GOONG_API_KEY },
        timeout: 10000,
      });

      const results = res.data?.results || [];
      if (!results.length) {
        console.log("‚Üí Kh√¥ng c√≥ k·∫øt qu·∫£ cho bi·∫øn th·ªÉ:", variant);
        continue;
      }

      // Log t·∫•t c·∫£ k·∫øt qu·∫£ ng·∫Øn g·ªçn
      results.forEach((r: any, i: number) => {
        const formatted = r.formatted_address || r.formattedAddress || "";
        const loc = r.geometry?.location || {};
        console.log(`  #${i}: ${formatted} ‚Üí ${loc.lat} ${loc.lng}`);
      });

      // 1) T√¨m k·∫øt qu·∫£ ch·ª©a "H·ªì Ch√≠ Minh" (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
      const preferByCity = results.find((r: any) => {
        const f = (r.formatted_address || r.formattedAddress || "").toLowerCase();
        return f.includes("h·ªì ch√≠ minh") || f.includes("ho chi minh") || f.includes("tp h·ªì ch√≠ minh") || f.includes("tphcm") || f.includes("qu·∫≠n");
      });
      if (preferByCity) {
        const loc = preferByCity.geometry.location;
        if (loc && typeof loc.lat === "number" && typeof loc.lng === "number") {
          console.log("‚úÖ Ch·ªçn k·∫øt qu·∫£ ∆∞u ti√™n theo city:", preferByCity.formatted_address || preferByCity.formattedAddress);
          const coords = { lat: loc.lat, lng: loc.lng };
          cache.set(cacheKey, coords);
          return coords;
        }
      }

      // 2) N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ ch·ª©a city, t√¨m k·∫øt qu·∫£ n·∫±m trong bounding box HCM
      const preferByBBox = results.find((r: any) => {
        const loc = r.geometry?.location;
        return loc && isInHCM(loc.lat, loc.lng);
      });
      if (preferByBBox) {
        const loc = preferByBBox.geometry.location;
        console.log("‚úÖ Ch·ªçn k·∫øt qu·∫£ theo bounding box HCM:", preferByBBox.formatted_address || preferByBBox.formattedAddress);
        const coords = { lat: loc.lat, lng: loc.lng };
        cache.set(cacheKey, coords);
        return coords;
      }

      // 3) Fallback: l·∫•y results[0] n·∫øu n√≥ n·∫±m trong d·∫£i lat/lng h·ª£p l√Ω (tr√°nh Nha Trang/H√† N·ªôi v.v.)
      const first = results[0];
      const locFirst = first.geometry?.location;
      if (locFirst && typeof locFirst.lat === "number" && typeof locFirst.lng === "number") {
        if (isInHCM(locFirst.lat, locFirst.lng)) {
          console.log("‚úÖ Ch·ªçn results[0] (n·∫±m trong HCM):", first.formatted_address || first.formattedAddress);
          const coords = { lat: locFirst.lat, lng: locFirst.lng };
          cache.set(cacheKey, coords);
          return coords;
        } else {
          console.log("‚Üí results[0] KH√îNG n·∫±m trong HCM, b·ªè qua:", first.formatted_address || first.formattedAddress);
          // ti·∫øp t·ª•c v√≤ng l·∫∑p: th·ª≠ bi·∫øn th·ªÉ k·∫ø ti·∫øp
        }
      }
      // n·∫øu none matched, ti·∫øp t·ª•c v·ªõi bi·∫øn th·ªÉ k·∫ø
    }

    // Sau khi th·ª≠ h·∫øt c√°c bi·∫øn th·ªÉ m√† kh√¥ng t√¨m ra k·∫øt qu·∫£ h·ª£p l√Ω, log v√† tr·∫£ null
    console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ geocode ph√π h·ª£p trong HCM cho:", address);
    cache.set(cacheKey, null);
    return null;
  } catch (error: any) {
    console.error("‚ùå L·ªói khi g·ªçi Goong API:", error?.message ?? error);
    cache.set(cacheKey, null);
    return null;
  }
}

/** X√≥a cache geocode */
export function clearGeocodeCache() {
  cache.clear();
  console.log("üóëÔ∏è ƒê√£ x√≥a cache geocode");
}
