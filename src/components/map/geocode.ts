import axios from "axios";
import { Coordinates } from "@/services/stationService";

export async function geocodeAddress(address: string): Promise<Coordinates | null> {
  if (!address) {
    console.warn("Geocode: ƒê·ªãa ch·ªâ tr·ªëng");
    return null;
  }

  try {
    console.log('üîç Geocode: ƒêang t√¨m t·ªça ƒë·ªô cho ƒë·ªãa ch·ªâ:', address);

    // ‚úÖ FIX 1: Th√™m User-Agent header (B·∫ÆT BU·ªòC cho Nominatim)
    // ‚úÖ FIX 2: Th√™m countrycodes=vn ƒë·ªÉ t√¨m ·ªü Vi·ªát Nam
    // ‚úÖ FIX 3: TƒÉng limit l√™n 5 ƒë·ªÉ c√≥ nhi·ªÅu k·∫øt qu·∫£ h∆°n
    const url = `https://nominatim.openstreetmap.org/search`;
    
    const response = await axios.get(url, {
      params: {
        q: address,
        format: 'json',
        limit: 5,
        countrycodes: 'vn', // Gi·ªõi h·∫°n t√¨m ki·∫øm ·ªü Vi·ªát Nam
        addressdetails: 1,   // L·∫•y chi ti·∫øt ƒë·ªãa ch·ªâ
      },
      headers: {
        'User-Agent': 'FPT FAST', // QUAN TR·ªåNG: Thay b·∫±ng t√™n app c·ªßa b·∫°n
        'Accept-Language': 'vi,en',
      },
      timeout: 10000, // Timeout 10 gi√¢y
    });

    console.log('üìç Geocode: Response:', response.data);

    if (!response.data || response.data.length === 0) {
      console.warn("‚ùå Geocode: Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho ƒë·ªãa ch·ªâ:", address);
      
      // Th·ª≠ t√¨m v·ªõi ƒë·ªãa ch·ªâ r√∫t g·ªçn
      const simplifiedAddress = simplifyVietnameseAddress(address);
      if (simplifiedAddress !== address) {
        console.log('üîÑ Geocode: Th·ª≠ l·∫°i v·ªõi ƒë·ªãa ch·ªâ r√∫t g·ªçn:', simplifiedAddress);
        return geocodeAddress(simplifiedAddress);
      }
      
      return null;
    }

    // L·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n (th∆∞·ªùng l√† ch√≠nh x√°c nh·∫•t)
    const result = response.data[0];
    const coordinates = {
      lat: parseFloat(result.lat),
      lng: parseFloat(result.lon)
    };

    console.log('‚úÖ Geocode: T√¨m th·∫•y t·ªça ƒë·ªô:', coordinates);
    console.log('üìç Geocode: Display name:', result.display_name);
    
    return coordinates;

  } catch (error: any) {
    if (error.code === 'ECONNABORTED') {
      console.error("‚ùå Geocode: Timeout - Server ph·∫£n h·ªìi qu√° l√¢u");
    } else if (error.response?.status === 429) {
      console.error("‚ùå Geocode: Qu√° nhi·ªÅu requests - Vui l√≤ng ƒë·ª£i 1 gi√¢y");
    } else if (error.response?.status === 403) {
      console.error("‚ùå Geocode: B·ªã ch·∫∑n - Ki·ªÉm tra User-Agent header");
    } else {
      console.error("‚ùå Geocode error:", error.message);
    }
    return null;
  }
}

// Helper function: R√∫t g·ªçn ƒë·ªãa ch·ªâ Vi·ªát Nam ƒë·ªÉ t√¨m d·ªÖ h∆°n
function simplifyVietnameseAddress(address: string): string {
  // Lo·∫°i b·ªè s·ªë nh√† v√† t√™n ƒë∆∞·ªùng c·ª• th·ªÉ, ch·ªâ gi·ªØ qu·∫≠n/huy·ªán v√† th√†nh ph·ªë
  const parts = address.split(',').map(p => p.trim());
  
  if (parts.length >= 3) {
    // L·∫•y 2-3 ph·∫ßn cu·ªëi (th∆∞·ªùng l√† qu·∫≠n/huy·ªán v√† th√†nh ph·ªë)
    return parts.slice(-3).join(', ');
  }
  
  return address;
}
export async function geocodeAddressMultiSource(address: string): Promise<Coordinates | null> {
  console.log('üîç Geocode Multi-Source: T√¨m t·ªça ƒë·ªô cho:', address);

  // Th·ª≠ Nominatim tr∆∞·ªõc
  let result = await geocodeAddress(address);
  if (result) return result;

  // N·∫øu Nominatim fail, th·ª≠ v·ªõi ƒë·ªãa ch·ªâ r√∫t g·ªçn
  console.log('üîÑ Geocode: Th·ª≠ v·ªõi ƒë·ªãa ch·ªâ r√∫t g·ªçn...');
  const simplified = simplifyVietnameseAddress(address);
  result = await geocodeAddress(simplified);
  if (result) return result;

  // N·∫øu v·∫´n fail, th·ª≠ ch·ªâ v·ªõi th√†nh ph·ªë
  console.log('üîÑ Geocode: Th·ª≠ ch·ªâ v·ªõi t√™n th√†nh ph·ªë...');
  const cityOnly = address.includes('H·ªì Ch√≠ Minh') 
    ? 'Ho Chi Minh City, Vietnam' 
    : address.split(',').slice(-1)[0].trim();
  result = await geocodeAddress(cityOnly);
  
  if (!result) {
    console.error('‚ùå Geocode: Th·∫•t b·∫°i v·ªõi t·∫•t c·∫£ ph∆∞∆°ng ph√°p');
  }
  
  return result;
}

// Helper: Test geocoding v·ªõi ƒë·ªãa ch·ªâ m·∫´u
export async function testGeocoding() {
  const testAddresses = [
    "709 Nguy·ªÖn Xi·ªÉn, Long Th·∫°nh M·ªπ, Th·ªß ƒê·ª©c, Th√†nh ph·ªë H·ªì Ch√≠ Minh",
    "Long Th·∫°nh M·ªπ, Th·ªß ƒê·ª©c, H·ªì Ch√≠ Minh",
    "Th·ªß ƒê·ª©c, H·ªì Ch√≠ Minh",
    "Ho Chi Minh City, Vietnam"
  ];

  console.log('üß™ Testing geocoding...');
  
  for (const address of testAddresses) {
    const result = await geocodeAddress(address);
    console.log(`\nüìç "${address}":`);
    console.log(result ? `‚úÖ ${result.lat}, ${result.lng}` : '‚ùå Kh√¥ng t√¨m th·∫•y');
    
    // ƒê·ª£i 1 gi√¢y gi·ªØa c√°c request ƒë·ªÉ tr√°nh rate limit
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}